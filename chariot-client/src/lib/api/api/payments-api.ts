/* tslint:disable */
/* eslint-disable */
/**
 * Twitter Clone API
 * The Twitter Clone API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { PaginatedResponse } from '../models';
/**
 * PaymentsApi - axios parameter creator
 * @export
 */
export const PaymentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all payments with optional filtering and pagination
         * @param {string} [recipient] Filter by recipient name
         * @param {string} [scheduledDateFrom] Filter by scheduled date from (ISO date string)
         * @param {string} [scheduledDateTo] Filter by scheduled date to (ISO date string)
         * @param {number} [limit] Number of items to return
         * @param {number} [offset] Number of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentsControllerGetPayments: async (recipient?: string, scheduledDateFrom?: string, scheduledDateTo?: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/payments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (recipient !== undefined) {
                localVarQueryParameter['recipient'] = recipient;
            }

            if (scheduledDateFrom !== undefined) {
                localVarQueryParameter['scheduledDateFrom'] = scheduledDateFrom;
            }

            if (scheduledDateTo !== undefined) {
                localVarQueryParameter['scheduledDateTo'] = scheduledDateTo;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get unique payment recipients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentsControllerGetUniqueRecipients: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/payments/recipients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentsApi - functional programming interface
 * @export
 */
export const PaymentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaymentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all payments with optional filtering and pagination
         * @param {string} [recipient] Filter by recipient name
         * @param {string} [scheduledDateFrom] Filter by scheduled date from (ISO date string)
         * @param {string} [scheduledDateTo] Filter by scheduled date to (ISO date string)
         * @param {number} [limit] Number of items to return
         * @param {number} [offset] Number of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentsControllerGetPayments(recipient?: string, scheduledDateFrom?: string, scheduledDateTo?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentsControllerGetPayments(recipient, scheduledDateFrom, scheduledDateTo, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentsApi.paymentsControllerGetPayments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get unique payment recipients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentsControllerGetUniqueRecipients(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentsControllerGetUniqueRecipients(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentsApi.paymentsControllerGetUniqueRecipients']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PaymentsApi - factory interface
 * @export
 */
export const PaymentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaymentsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all payments with optional filtering and pagination
         * @param {string} [recipient] Filter by recipient name
         * @param {string} [scheduledDateFrom] Filter by scheduled date from (ISO date string)
         * @param {string} [scheduledDateTo] Filter by scheduled date to (ISO date string)
         * @param {number} [limit] Number of items to return
         * @param {number} [offset] Number of items to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentsControllerGetPayments(recipient?: string, scheduledDateFrom?: string, scheduledDateTo?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedResponse> {
            return localVarFp.paymentsControllerGetPayments(recipient, scheduledDateFrom, scheduledDateTo, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get unique payment recipients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentsControllerGetUniqueRecipients(options?: RawAxiosRequestConfig): AxiosPromise<Array<string>> {
            return localVarFp.paymentsControllerGetUniqueRecipients(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PaymentsApi - object-oriented interface
 * @export
 * @class PaymentsApi
 * @extends {BaseAPI}
 */
export class PaymentsApi extends BaseAPI {
    /**
     * 
     * @summary Get all payments with optional filtering and pagination
     * @param {string} [recipient] Filter by recipient name
     * @param {string} [scheduledDateFrom] Filter by scheduled date from (ISO date string)
     * @param {string} [scheduledDateTo] Filter by scheduled date to (ISO date string)
     * @param {number} [limit] Number of items to return
     * @param {number} [offset] Number of items to skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    public paymentsControllerGetPayments(recipient?: string, scheduledDateFrom?: string, scheduledDateTo?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return PaymentsApiFp(this.configuration).paymentsControllerGetPayments(recipient, scheduledDateFrom, scheduledDateTo, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get unique payment recipients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    public paymentsControllerGetUniqueRecipients(options?: RawAxiosRequestConfig) {
        return PaymentsApiFp(this.configuration).paymentsControllerGetUniqueRecipients(options).then((request) => request(this.axios, this.basePath));
    }
}

